<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>

<script type="text/javascript">
    $(document).ready(function(){
       CukeSniffer.init();
    });

    var CukeSniffer = {
        init: function(){
            CukeSniffer.actions.bind();
            CukeSniffer.view._startTooltips();
            CukeSniffer.view._updateRowColors();
        },
        view: {
            _hideDetails: function($section){
                $section.find(".details").hide();
            },
            hideRuleDetails: function(){
                CukeSniffer.view._hideDetails($(".rule"));
            },
            hideDeadStepDetails: function(){
                CukeSniffer.view._hideDetails($(".deadStep"));
            },
            hideFeatures: function(){
                CukeSniffer.view._hideDetails($(".feature > .row"));
            },
            hideStepDefinitions: function(){
                CukeSniffer.view._hideDetails($(".stepDefinition > .row"));
            },
            hideHooks: function(){
                CukeSniffer.view._hideDetails($(".hook > .row"));
            },
            toggleDetails: function(){
                $(this).closest(".deadStep, .feature, .stepDefinition, .hook").find(".row > .details").slideToggle();
            },
            _startTooltips: function(){
                $("[title]").tooltip();
            },
            _updateRuleRowColors: function(){
                $(".rule:visible:even").addClass("blueRow");
            },
            _updateRowColors: function(){
                $(" .deadStep:even, .feature:even, .stepDefinition:even, .hook:even").addClass("blueRow");
            }
        },
        actions: {
            bind: function(){
                CukeSniffer.actions._togglePanelHeaderIcons();
                CukeSniffer.actions._viewRules();
                CukeSniffer.actions._clickRow();
                CukeSniffer.actions._ruleFilters();
                CukeSniffer.actions.collapseRules();
                CukeSniffer.actions.expandRules();
                CukeSniffer.actions.collapseDeadSteps();
                CukeSniffer.actions.expandDeadSteps();
                CukeSniffer.actions.toggleDetails();
                CukeSniffer.actions.collapseFeatureDetails();
                CukeSniffer.actions.expandFeatureDetails();
                CukeSniffer.actions.collapseStepDefinitionDetails();
                CukeSniffer.actions.expandStepDefinitionDetails();
                CukeSniffer.actions.collapseHooks();
                CukeSniffer.actions.expandHooks();
                CukeSniffer.actions.enableAllRules();
                CukeSniffer.actions.disableAllRules();
                CukeSniffer.actions.changeRuleStatus();
            },
            _togglePanelHeaderIcons: function(){
                $(document).on("click", ".panel-title", function(){
                    var $icon = $(this).find(".glyphicon");
                    $icon.toggleClass("glyphicon-menu-down");
                    $icon.toggleClass("glyphicon-menu-up");
                });
            },
            _viewRules: function(){
                $(document).on("click", "#rulesTab", CukeSniffer.view._updateRuleRowColors);
            },
            _clickRow: function(){
                $(document).on("click", ".rule", function(){
                    var $details = $(this).find(".details");
                    $details.toggle();
                });
                $(document).on("click", ".rule :checkbox", function(event){
                    event.stopPropagation();
                });
            },
            _ruleFilters: function(){
                $(document).on("click", "#ruleFilters .btn", function(){
                    var $clickedCheckbox = $(this).find(":checkbox");
                    $(".rule").hide().removeClass("blueRow");
                    $("#ruleFilters .btn").each(function(index, button){
                        var $checkbox = $(button).find(":checkbox"),
                            filterName = $checkbox.data("rule-type"),
                                        //hate this hack.
                            checked = ($clickedCheckbox[0] == $checkbox[0]) ? !$checkbox.is(":checked") : $checkbox.is(":checked");
                        if(checked){
                            $("[rule-" + filterName + "]").show();
                        }
                    });
                    CukeSniffer.view._updateRuleRowColors();
                });
            },
            collapseRules: function(){
                $(document).on("click", "#collapseRules", CukeSniffer.view.hideRuleDetails);
            },
            expandRules: function(){
                $(document).on("click", "#expandRules", function(){
                    $(".rule .details").show();
                });
            },
            collapseDeadSteps: function(){
                $(document).on("click", "#collapseDeadSteps", CukeSniffer.view.hideDeadStepDetails);
            },
            expandDeadSteps: function(){
                $(document).on("click", "#expandDeadSteps", function(){
                    $(".deadStep .details").show();
                });
            },
            toggleDetails: function(){
                $(document).on("click", ".deadStep > .row > .title, .feature > .row > .title, .stepDefinition > .row > .title, .hook .title", CukeSniffer.view.toggleDetails);
            },
            collapseFeatureDetails: function(){
                $(document).on("click", "#collapseFeatures", CukeSniffer.view.hideFeatures);
            },
            expandFeatureDetails: function(){
                $(document).on("click", "#expandFeatures", function(){
                    $(".feature > .row > .details").show();
                });
            },
            collapseStepDefinitionDetails: function(){
                $(document).on("click", "#collapseStepDefinitions", CukeSniffer.view.hideStepDefinitions);
            },
            expandStepDefinitionDetails: function(){
                $(document).on("click", "#expandStepDefinitions", function(){
                    $(".stepDefinition > .row > .details").show();
                });
            },
            collapseHooks: function(){
                $(document).on("click", "#collapseHooks", CukeSniffer.view.hideHooks);
            },
            expandHooks: function(){
                $(document).on("click", "#expandHooks", function(){
                    $(".hook > .row > .details").show();
                });
            },
            enableAllRules: function(){
                $(document).on("click", "#enableAllRules", function(){
                   $(".rule input[type='checkbox']:not(:checked)").click();
                });
            },
            disableAllRules: function(){
                $(document).on("click", "#disableAllRules", function(){
                    $(".rule input[type='checkbox']:checked").click();
                });
            },
            changeRuleStatus: function(){
                $(document).on("click", ".rule input[type='checkbox']", function(){
                    var enabled = $(this).is(":checked"),
                        phrase = $(this).closest(".rule").find("[data-phrase]").html(),
                            improvementPhraseList = [];
                    if(phrase.indexOf("{class}") != -1) {
                        var targets = $(this).closest(".rule").find("[data-targets]").html().trim().split(", ");
                        if(targets.indexOf("Scenario") != -1){
                            targets.push("Scenario Outline");
                        }
                        $.each(targets, function (n, target) {
                            improvementPhraseList.push(phrase.replace("{class}", target))
                        });
                    } else if(phrase.indexOf("{word}") != -1){
                        var targets = $(this).closest(".rule").find("[data-conditions]").html().trim().replace("[", "").replace("]", "").replace(/\"/g, "").split(", ");
                        $.each(targets, function (n, target) {
                            improvementPhraseList.push(phrase.replace("{word}", target))
                        });
                    } else {
                        improvementPhraseList.push(phrase)
                    }
                    (enabled) ? CukeSniffer.actions._enableRule(improvementPhraseList) : CukeSniffer.actions._disableRule(improvementPhraseList);
                });
            },
            _enableRule: function(improvementPhraseList){
                $.each(improvementPhraseList, function(n, phrase){
                    var $all = $("[data-improvement-row]:has([data-improvement='" + phrase +"'])");
                    $all.show();
                });
            },
            _disableRule: function(improvementPhraseList){
                $.each(improvementPhraseList, function(n, phrase){
                    var $all = $("[data-improvement-row]:has([data-improvement='" + phrase +"'])");
                    $all.hide();
                });
            }
        }
    };
</script>
