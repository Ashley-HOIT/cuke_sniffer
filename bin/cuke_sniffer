#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')

require 'cuke_sniffer'

help_cmd_txt = "Welcome to CukeSniffer!
Calling CukeSniffer with no arguments will run it against the current directory.
Other Options for Running include:
  <feature_file_path>, <step_def_file_path> : Runs CukeSniffer against the
                                              specified paths.
  -o, --out <type> (name)                   : Where <type> is 'html' or 'xml'.
                                              Runs CukeSniffer then outputs an
                                              html/xml file in the current
                                              directory (with optional name).
  -h, --help                                : You get this lovely document.
  -p, --project <project_root>              : Root directory of project
  -f, --features <feature_path>             : Path to features directory
  -s, --step_definitions <step_def_path>    : Path to step definitions directory
  -hk, --hooks <hooks_path>                 : Path to support directory            "

if ARGV.include? "-h" or ARGV.include? "--help"
  puts help_cmd_txt
  exit
end

cuke_sniffer = nil
if (ARGV[0] != nil and File.directory?(ARGV[0])) and (ARGV[1] != nil and File.directory?
(ARGV[1]))
  cuke_sniffer = CukeSniffer::CLI.new(ARGV[0], ARGV[1])
else
  cuke_sniffer = CukeSniffer::CLI.new
end

def print_results(cuke_sniffer)
  puts cuke_sniffer.output_results
end

if ARGV.include? "--project" or ARGV.include? "-p"
  index = ARGV.index("--project")
  index ||= ARGV.index("-p")
  project_root = ARGV[index + 1]
  cuke_sniffer = CukeSniffer::CLI.new({:features_location => project_root, :step_definitions_location => project_root, :hooks_location => project_root})
end

if ARGV.include? "--features" or ARGV.include? "-f"
  index = ARGV.index("--features")
  index ||= ARGV.index("-f")
  features_directory = ARGV[index + 1]
  cuke_sniffer = CukeSniffer::CLI.new({:features_location => features_directory})
end

if ARGV.include? "--step_definitions" or ARGV.include? "-s"
  index = ARGV.index("--step_definitions")
  index ||= ARGV.index("-s")
  step_definition_directory = ARGV[index + 1]
  cuke_sniffer = CukeSniffer::CLI.new({:step_definitions_location => step_definition_directory})
end

if ARGV.include? "--hooks" or ARGV.include? "-hk"
  index = ARGV.index("--hooks")
  index ||= ARGV.index("-hk")
  hook_directory = ARGV[index + 1]
  cuke_sniffer = CukeSniffer::CLI.new({:hooks_location => hook_directory})
end

if ARGV.include? "--out" or ARGV.include? "-o"
  index = ARGV.index("--out")
  index ||= ARGV.index("-o")
  out_type = ARGV[index + 1]
  case out_type
    when "html"
      file_name = ARGV[index + 2]
      if file_name.nil?
        cuke_sniffer.output_html
      else
        file_name = file_name + ".html" unless file_name =~ /\.html$/
        cuke_sniffer.output_html(file_name)
      end
    when "xml"
      file_name = ARGV[index + 2]
      if file_name.nil?
        cuke_sniffer.output_xml
      else
        file_name = file_name + ".xml" unless file_name =~ /\.xml$/
        cuke_sniffer.output_xml(file_name)
      end
    else
      print_results(cuke_sniffer)
  end
else
  print_results(cuke_sniffer)
end

puts "Completed Sniffing."
